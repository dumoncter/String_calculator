/**
 * @created by Dmitriy Stanev
 * –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
 */
package CalculatorTest;

import java.util.Scanner;


public class Main {
    static int firstValue, secondValue, result;
    static char operation;
    static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws Exception {
        // while (true) {
        System.out.println("‚úî –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!\nüëç –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ: e (rus-eng)\nüòú –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ");
        String input = scanner.nextLine().replaceAll("\\s+", "");
        if (input.equals("–µ") || input.equals("e")) {
            System.out.println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.");
            System.exit(0);
        }

        char[] charArray = new char[10];
        for (int i = 0; i < input.length(); i++) {
            charArray[i] = input.charAt(i);
            if (charArray[i] == '+') {
                operation = '+';
            }
            if (charArray[i] == '-') {
                operation = '-';
            }
            if (charArray[i] == '*') {
                operation = '*';
            }
            if (charArray[i] == '/') {
                operation = '/';
            }
        }


        String massCharString = String.valueOf(charArray);
        String[] ArrayStr = massCharString.split("[+-/*]");

        if (ArrayStr.length > 2) {
            throw new Exception("–§–æ—Ä–º–∞—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–∏—é - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–≤–∞ –æ–ø–µ—Ä–∞–Ω–¥–∞ –∏ –æ–¥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä (+, -, *, /)");
        }

        if (ArrayStr.length < 2) {
            throw new Exception("–°—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π");
        }


        String left = ArrayStr[0].trim();
        String right = ArrayStr[1].trim();


        firstValue = RomanNumb.romanToArabian(left);
        secondValue = RomanNumb.romanToArabian(right);


        if (firstValue == -1 && secondValue > -1 || secondValue == -1 && firstValue > -1) {
            throw new Exception("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∞—Ä–∞–±—Å–∫–∏–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —Ä–∏–º—Å–∫–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ X");
        }

        if (firstValue < 0 && secondValue < 0) {
            result = 0;

        } else {
            result = Calculator.calculations(firstValue, secondValue, operation);
            if (result < 0 || result == 0) {
                throw new Exception("–í —Ä–∏–º—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª");
            }
            String resultRoman = RomanNumb.ArabToRoman(result);
            System.out.println(resultRoman);
            return;
        }

        try {
            firstValue = Integer.parseInt(left);
            secondValue = Integer.parseInt(right);
        } catch (NumberFormatException e) {
            throw new Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏. –í–≤–µ–¥–∏ —Ä–∏–º—Å–∫—É—é –∏–ª–∏ –∞—Ä–∞–±—Å–∫—É—é —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 10");
        }
        if ((firstValue < 1) || (firstValue > 10) || (secondValue < 1) || (secondValue > 10)) {
            throw new Exception("–ß–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ü–∏—Ñ—Ä –æ—Ç 1 –¥–æ 10");
        } else {
            result = Calculator.calculations(firstValue, secondValue, operation);
            System.out.println(result);
        }

        // }
    }
}
